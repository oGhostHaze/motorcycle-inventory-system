<?php

namespace App\Exports;

use Maatwebsite\Excel\Concerns\FromCollection;
use Maatwebsite\Excel\Concerns\WithMultipleSheets;
use Maatwebsite\Excel\Concerns\WithTitle;
use Maatwebsite\Excel\Concerns\WithHeadings;
use Maatwebsite\Excel\Concerns\WithStyles;
use Maatwebsite\Excel\Concerns\WithColumnFormatting;
use Maatwebsite\Excel\Concerns\WithMapping;
use Maatwebsite\Excel\Concerns\WithColumnWidths;
use PhpOffice\PhpSpreadsheet\Worksheet\Worksheet;
use PhpOffice\PhpSpreadsheet\Style\NumberFormat;
use PhpOffice\PhpSpreadsheet\Style\Fill;
use PhpOffice\PhpSpreadsheet\Style\Border;
use PhpOffice\PhpSpreadsheet\Style\Alignment;
use Carbon\Carbon;

class CustomerReportsExport implements WithMultipleSheets
{
    private $reportType;
    private $reportData;
    private $summaryData;
    private $filters;

    public function __construct($reportType, $reportData, $summaryData, $filters = [])
    {
        $this->reportType = $reportType;
        $this->reportData = $reportData;
        $this->summaryData = $summaryData;
        $this->filters = $filters;
    }

    public function sheets(): array
    {
        $sheets = [
            new CustomerSummarySheet($this->reportType, $this->summaryData, $this->filters),
        ];

        // Add report-specific sheet
        switch ($this->reportType) {
            case 'customer_analysis':
                $sheets[] = new CustomerAnalysisSheet($this->reportData);
                break;
            case 'purchase_behavior':
                $sheets[] = new PurchaseBehaviorSheet($this->reportData);
                break;
            case 'loyalty_analysis':
                $sheets[] = new LoyaltyAnalysisSheet($this->reportData);
                break;
            case 'segmentation':
                $sheets[] = new CustomerSegmentationSheet($this->reportData);
                break;
            case 'lifetime_value':
                $sheets[] = new LifetimeValueSheet($this->reportData);
                break;
            case 'product_preferences':
                $sheets[] = new ProductPreferencesSheet($this->reportData);
                break;
        }

        return $sheets;
    }
}

class CustomerSummarySheet implements FromCollection, WithTitle, WithHeadings, WithStyles, WithColumnFormatting, WithColumnWidths
{
    private $reportType;
    private $summaryData;
    private $filters;

    public function __construct($reportType, $summaryData, $filters)
    {
        $this->reportType = $reportType;
        $this->summaryData = $summaryData;
        $this->filters = $filters;
    }

    public function collection()
    {
        $reportTypes = [
            'customer_analysis' => 'Customer Analysis Report',
            'purchase_behavior' => 'Purchase Behavior Report',
            'loyalty_analysis' => 'Loyalty Analysis Report',
            'segmentation' => 'Customer Segmentation Report',
            'lifetime_value' => 'Customer Lifetime Value Report',
            'product_preferences' => 'Product Preferences Report',
        ];

        return collect([
            ['Customer Report Summary', ''],
            ['Report Type', $reportTypes[$this->reportType] ?? 'Customer Report'],
            ['Generated On', now()->format('M j, Y g:i A')],
            ['Generated By', auth()->user()->name],
            ['Report Period', ($this->filters['dateFrom'] ?? '') . ' to ' . ($this->filters['dateTo'] ?? '')],
            ['Warehouse Filter', $this->filters['warehouse_name'] ?? 'All Warehouses'],
            ['Customer Group Filter', $this->filters['customer_group'] ?: 'All Groups'],
            ['Customer Status Filter', $this->filters['customer_status'] ?: 'All Statuses'],
            [''],
            ['CUSTOMER METRICS', ''],
            ['Total Customers', number_format($this->summaryData['total_customers'])],
            ['Total Revenue', '₱' . number_format($this->summaryData['total_revenue'], 2)],
            ['Total Orders', number_format($this->summaryData['total_orders'])],
            ['Average Order Value', '₱' . number_format($this->summaryData['avg_order_value'], 2)],
            ['New Customers', number_format($this->summaryData['new_customers'])],
            ['Returning Customers', number_format($this->summaryData['returning_customers'])],
            ['Top Customer Spent', '₱' . number_format($this->summaryData['top_customer_spent'], 2)],
            ['Customer Retention Rate', number_format($this->summaryData['retention_rate'], 1) . '%'],
        ]);
    }

    public function headings(): array
    {
        return ['Metric', 'Value'];
    }

    public function title(): string
    {
        return 'Summary';
    }

    public function styles(Worksheet $sheet)
    {
        return [
            1 => ['font' => ['bold' => true, 'size' => 16]],
            10 => ['font' => ['bold' => true, 'size' => 14]],
            'A:B' => ['alignment' => ['horizontal' => Alignment::HORIZONTAL_LEFT]],
        ];
    }

    public function columnFormats(): array
    {
        return [
            'B' => NumberFormat::FORMAT_TEXT,
        ];
    }

    public function columnWidths(): array
    {
        return [
            'A' => 25,
            'B' => 30,
        ];
    }
}

class CustomerAnalysisSheet implements FromCollection, WithTitle, WithHeadings, WithStyles, WithColumnFormatting, WithMapping, WithColumnWidths
{
    private $reportData;

    public function __construct($reportData)
    {
        $this->reportData = $reportData;
    }

    public function collection()
    {
        return collect($this->reportData);
    }

    public function map($row): array
    {
        return [
            $row->customer?->name ?? 'Walk-in Customer',
            $row->customer?->email ?? '',
            $row->customer?->phone ?? '',
            $row->customer?->type ?? 'Regular',
            $row->total_orders,
            $row->total_spent,
            $row->avg_order_value,
            $row->total_profit_generated ?? 0,
            $row->last_purchase_date ? Carbon::parse($row->last_purchase_date)->format('M j, Y') : 'Never',
            $row->first_purchase_date ? Carbon::parse($row->first_purchase_date)->format('M j, Y') : 'Never',
        ];
    }

    public function headings(): array
    {
        return [
            'Customer Name',
            'Email',
            'Phone',
            'Type',
            'Total Orders',
            'Total Spent',
            'Avg Order Value',
            'Profit Generated',
            'Last Purchase',
            'Customer Since',
        ];
    }

    public function title(): string
    {
        return 'Customer Analysis';
    }

    public function styles(Worksheet $sheet)
    {
        return [
            1 => ['font' => ['bold' => true]],
            'A:J' => ['alignment' => ['horizontal' => Alignment::HORIZONTAL_LEFT]],
        ];
    }

    public function columnFormats(): array
    {
        return [
            'E' => NumberFormat::FORMAT_NUMBER,
            'F' => '"₱"#,##0.00',
            'G' => '"₱"#,##0.00',
            'H' => '"₱"#,##0.00',
        ];
    }

    public function columnWidths(): array
    {
        return [
            'A' => 25,
            'B' => 25,
            'C' => 15,
            'D' => 12,
            'E' => 12,
            'F' => 15,
            'G' => 15,
            'H' => 15,
            'I' => 15,
            'J' => 15,
        ];
    }
}

class PurchaseBehaviorSheet implements FromCollection, WithTitle, WithHeadings, WithStyles, WithColumnFormatting, WithMapping, WithColumnWidths
{
    private $reportData;

    public function __construct($reportData)
    {
        $this->reportData = $reportData;
    }

    public function collection()
    {
        return collect($this->reportData);
    }

    public function map($row): array
    {
        return [
            $row->customer?->name ?? 'Walk-in Customer',
            $row->customer?->email ?? '',
            $row->purchase_frequency,
            $row->avg_purchase_amount,
            $row->purchase_variance ?? 0,
            $row->preferred_hour . ':00',
            number_format($row->avg_days_between_purchases ?? 0, 1) . ' days',
        ];
    }

    public function headings(): array
    {
        return [
            'Customer',
            'Email',
            'Purchase Frequency',
            'Avg Purchase Amount',
            'Purchase Variance',
            'Preferred Time',
            'Purchase Cycle',
        ];
    }

    public function title(): string
    {
        return 'Purchase Behavior';
    }

    public function styles(Worksheet $sheet)
    {
        return [
            1 => ['font' => ['bold' => true]],
            'A:G' => ['alignment' => ['horizontal' => Alignment::HORIZONTAL_LEFT]],
        ];
    }

    public function columnFormats(): array
    {
        return [
            'C' => NumberFormat::FORMAT_NUMBER,
            'D' => '"₱"#,##0.00',
            'E' => '"₱"#,##0.00',
        ];
    }

    public function columnWidths(): array
    {
        return [
            'A' => 25,
            'B' => 25,
            'C' => 15,
            'D' => 18,
            'E' => 15,
            'F' => 15,
            'G' => 15,
        ];
    }
}

class LoyaltyAnalysisSheet implements FromCollection, WithTitle, WithHeadings, WithStyles, WithColumnFormatting, WithMapping, WithColumnWidths
{
    private $reportData;

    public function __construct($reportData)
    {
        $this->reportData = $reportData;
    }

    public function collection()
    {
        return collect($this->reportData);
    }

    public function map($row): array
    {
        $score = $row->loyalty_score;
        if ($score >= 80) {
            $tier = 'Champion';
        } elseif ($score >= 60) {
            $tier = 'Loyal';
        } elseif ($score >= 40) {
            $tier = 'Potential';
        } else {
            $tier = 'At Risk';
        }

        return [
            $row->name,
            $row->email ?? '',
            ucfirst($row->type ?? 'Regular'),
            $row->total_orders,
            $row->total_spent,
            $row->loyalty_score,
            $tier,
            $row->is_active ? 'Active' : 'Inactive',
        ];
    }

    public function headings(): array
    {
        return [
            'Customer',
            'Email',
            'Group',
            'Orders',
            'Total Spent',
            'Loyalty Score',
            'Loyalty Tier',
            'Status',
        ];
    }

    public function title(): string
    {
        return 'Loyalty Analysis';
    }

    public function styles(Worksheet $sheet)
    {
        return [
            1 => ['font' => ['bold' => true]],
            'A:H' => ['alignment' => ['horizontal' => Alignment::HORIZONTAL_LEFT]],
        ];
    }

    public function columnFormats(): array
    {
        return [
            'D' => NumberFormat::FORMAT_NUMBER,
            'E' => '"₱"#,##0.00',
            'F' => NumberFormat::FORMAT_NUMBER,
        ];
    }

    public function columnWidths(): array
    {
        return [
            'A' => 25,
            'B' => 25,
            'C' => 12,
            'D' => 12,
            'E' => 15,
            'F' => 12,
            'G' => 15,
            'H' => 12,
        ];
    }
}

class CustomerSegmentationSheet implements FromCollection, WithTitle, WithHeadings, WithStyles, WithColumnFormatting, WithMapping, WithColumnWidths
{
    private $reportData;

    public function __construct($reportData)
    {
        $this->reportData = $reportData;
    }

    public function collection()
    {
        return collect($this->reportData);
    }

    public function map($row): array
    {
        return [
            $row->customer?->name ?? 'Walk-in Customer',
            $row->customer?->email ?? '',
            $row->monetary_value,
            $row->frequency,
            $row->recency_days,
            $row->segment,
            'R:' . $row->recency_score . ' F:' . $row->frequency_score . ' M:' . $row->monetary_score,
        ];
    }

    public function headings(): array
    {
        return [
            'Customer',
            'Email',
            'Total Spent',
            'Purchase Frequency',
            'Days Since Last Purchase',
            'Customer Segment',
            'RFM Scores',
        ];
    }

    public function title(): string
    {
        return 'Customer Segmentation';
    }

    public function styles(Worksheet $sheet)
    {
        return [
            1 => ['font' => ['bold' => true]],
            'A:G' => ['alignment' => ['horizontal' => Alignment::HORIZONTAL_LEFT]],
        ];
    }

    public function columnFormats(): array
    {
        return [
            'C' => '"₱"#,##0.00',
            'D' => NumberFormat::FORMAT_NUMBER,
            'E' => NumberFormat::FORMAT_NUMBER,
        ];
    }

    public function columnWidths(): array
    {
        return [
            'A' => 25,
            'B' => 25,
            'C' => 15,
            'D' => 15,
            'E' => 20,
            'F' => 20,
            'G' => 15,
        ];
    }
}

class LifetimeValueSheet implements FromCollection, WithTitle, WithHeadings, WithStyles, WithColumnFormatting, WithMapping, WithColumnWidths
{
    private $reportData;

    public function __construct($reportData)
    {
        $this->reportData = $reportData;
    }

    public function collection()
    {
        return collect($this->reportData);
    }

    public function map($row): array
    {
        $clv = $row->predicted_clv;
        if ($clv >= 200000) {
            $category = 'Platinum';
        } elseif ($clv >= 100000) {
            $category = 'Gold';
        } elseif ($clv >= 50000) {
            $category = 'Silver';
        } elseif ($clv >= 20000) {
            $category = 'Bronze';
        } else {
            $category = 'Standard';
        }

        return [
            $row->name,
            $row->email ?? '',
            $row->total_orders,
            $row->lifetime_value,
            $row->avg_order_value,
            $row->customer_lifespan_days,
            $row->predicted_clv,
            $category,
        ];
    }

    public function headings(): array
    {
        return [
            'Customer',
            'Email',
            'Total Orders',
            'Actual CLV',
            'Avg Order Value',
            'Customer Lifespan (Days)',
            'Predicted CLV',
            'CLV Category',
        ];
    }

    public function title(): string
    {
        return 'Lifetime Value';
    }

    public function styles(Worksheet $sheet)
    {
        return [
            1 => ['font' => ['bold' => true]],
            'A:H' => ['alignment' => ['horizontal' => Alignment::HORIZONTAL_LEFT]],
        ];
    }

    public function columnFormats(): array
    {
        return [
            'C' => NumberFormat::FORMAT_NUMBER,
            'D' => '"₱"#,##0.00',
            'E' => '"₱"#,##0.00',
            'F' => NumberFormat::FORMAT_NUMBER,
            'G' => '"₱"#,##0.00',
        ];
    }

    public function columnWidths(): array
    {
        return [
            'A' => 25,
            'B' => 25,
            'C' => 12,
            'D' => 15,
            'E' => 15,
            'F' => 18,
            'G' => 15,
            'H' => 15,
        ];
    }
}

class ProductPreferencesSheet implements FromCollection, WithTitle, WithHeadings, WithStyles, WithColumnFormatting, WithMapping, WithColumnWidths
{
    private $reportData;

    public function __construct($reportData)
    {
        $this->reportData = $reportData;
    }

    public function collection()
    {
        return collect($this->reportData);
    }

    public function map($row): array
    {
        return [
            $row->customer_name ?? 'Walk-in Customer',
            $row->customer_email ?? '',
            $row->preferred_category,
            $row->category_purchases,
            $row->total_quantity,
            $row->total_spent_in_category,
            $row->avg_price_point,
        ];
    }

    public function headings(): array
    {
        return [
            'Customer',
            'Email',
            'Preferred Category',
            'Purchases in Category',
            'Total Quantity',
            'Total Spent',
            'Avg Price Point',
        ];
    }

    public function title(): string
    {
        return 'Product Preferences';
    }

    public function styles(Worksheet $sheet)
    {
        return [
            1 => ['font' => ['bold' => true]],
            'A:G' => ['alignment' => ['horizontal' => Alignment::HORIZONTAL_LEFT]],
        ];
    }

    public function columnFormats(): array
    {
        return [
            'D' => NumberFormat::FORMAT_NUMBER,
            'E' => NumberFormat::FORMAT_NUMBER,
            'F' => '"₱"#,##0.00',
            'G' => '"₱"#,##0.00',
        ];
    }

    public function columnWidths(): array
    {
        return [
            'A' => 25,
            'B' => 25,
            'C' => 20,
            'D' => 18,
            'E' => 15,
            'F' => 15,
            'G' => 15,
        ];
    }
}
