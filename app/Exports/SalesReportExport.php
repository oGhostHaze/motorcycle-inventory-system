<?php

namespace App\Exports;

use App\Models\Sale;
use App\Models\SaleItem;
use Carbon\Carbon;
use Illuminate\Support\Facades\DB;
use Maatwebsite\Excel\Concerns\FromCollection;
use Maatwebsite\Excel\Concerns\WithMultipleSheets;
use Maatwebsite\Excel\Concerns\WithTitle;
use Maatwebsite\Excel\Concerns\WithHeadings;
use Maatwebsite\Excel\Concerns\WithStyles;
use Maatwebsite\Excel\Concerns\WithColumnFormatting;
use PhpOffice\PhpSpreadsheet\Worksheet\Worksheet;
use PhpOffice\PhpSpreadsheet\Style\NumberFormat;
use PhpOffice\PhpSpreadsheet\Style\Fill;
use PhpOffice\PhpSpreadsheet\Style\Border;

class SalesReportExport implements WithMultipleSheets
{
    private $startDate;
    private $endDate;

    public function __construct($startDate, $endDate)
    {
        $this->startDate = $startDate;
        $this->endDate = $endDate;
    }

    public function sheets(): array
    {
        return [
            new SalesSummarySheet($this->startDate, $this->endDate),
            new TopProductsSheet($this->startDate, $this->endDate),
            new TopCustomersSheet($this->startDate, $this->endDate),
            new SalesTrendsSheet($this->startDate, $this->endDate),
            new DetailedSalesSheet($this->startDate, $this->endDate),
        ];
    }
}

class SalesSummarySheet implements FromCollection, WithTitle, WithHeadings, WithStyles, WithColumnFormatting
{
    private $startDate;
    private $endDate;

    public function __construct($startDate, $endDate)
    {
        $this->startDate = $startDate;
        $this->endDate = $endDate;
    }

    public function collection()
    {
        $sales = Sale::whereBetween('created_at', [
            Carbon::parse($this->startDate)->startOfDay(),
            Carbon::parse($this->endDate)->endOfDay()
        ])->where('status', 'completed')->get();

        $summary = [
            ['Metric', 'Value'],
            ['Report Period', Carbon::parse($this->startDate)->format('M j, Y') . ' - ' . Carbon::parse($this->endDate)->format('M j, Y')],
            ['Generated On', now()->format('M j, Y g:i A')],
            ['Generated By', auth()->user()->name],
            [''],
            ['SALES SUMMARY', ''],
            ['Total Sales Count', $sales->count()],
            ['Total Revenue', $sales->sum('total_amount')],
            ['Average Sale Value', $sales->count() > 0 ? $sales->avg('total_amount') : 0],
            ['Total Items Sold', $sales->sum(function ($sale) {
                return $sale->items->sum('quantity');
            })],
            [''],
            ['PAYMENT BREAKDOWN', ''],
            ['Cash Sales', $sales->where('payment_method', 'cash')->sum('total_amount')],
            ['Card Sales', $sales->where('payment_method', 'card')->sum('total_amount')],
            ['GCash Sales', $sales->where('payment_method', 'gcash')->sum('total_amount')],
            ['Bank Transfer Sales', $sales->where('payment_method', 'bank_transfer')->sum('total_amount')],
            [''],
            ['PROFIT ANALYSIS', ''],
        ];

        // Calculate profit
        $totalProfit = 0;
        $totalCost = 0;
        $totalRevenue = 0;

        foreach ($sales as $sale) {
            foreach ($sale->items as $item) {
                $cost = ($item->cost_price ?? $item->product->cost_price ?? 0) * $item->quantity;
                $revenue = $item->total_price;

                $totalCost += $cost;
                $totalRevenue += $revenue;
                $totalProfit += ($revenue - $cost);
            }
        }

        $summary = array_merge($summary, [
            ['Total Profit', $totalProfit],
            ['Total Cost of Goods', $totalCost],
            ['Profit Margin %', $totalRevenue > 0 ? ($totalProfit / $totalRevenue) * 100 : 0],
        ]);

        return collect($summary);
    }

    public function title(): string
    {
        return 'Summary';
    }

    public function headings(): array
    {
        return [];
    }

    public function styles(Worksheet $sheet)
    {
        return [
            1 => ['font' => ['bold' => true, 'size' => 12]],
            6 => ['font' => ['bold' => true, 'color' => ['rgb' => '1f2937']]],
            12 => ['font' => ['bold' => true, 'color' => ['rgb' => '1f2937']]],
            18 => ['font' => ['bold' => true, 'color' => ['rgb' => '1f2937']]],
        ];
    }

    public function columnFormats(): array
    {
        return [
            'B' => NumberFormat::FORMAT_NUMBER_COMMA_SEPARATED1,
        ];
    }
}

class TopProductsSheet implements FromCollection, WithTitle, WithHeadings, WithStyles, WithColumnFormatting
{
    private $startDate;
    private $endDate;

    public function __construct($startDate, $endDate)
    {
        $this->startDate = $startDate;
        $this->endDate = $endDate;
    }

    public function collection()
    {
        return SaleItem::query()
            ->select([
                'products.name',
                'products.sku',
                DB::raw('SUM(sale_items.quantity) as total_quantity'),
                DB::raw('SUM(sale_items.total_price) as total_revenue'),
                DB::raw('AVG(sale_items.unit_price) as avg_price'),
                DB::raw('COUNT(DISTINCT sale_items.sale_id) as total_sales'),
                'products.cost_price'
            ])
            ->join('products', 'sale_items.product_id', '=', 'products.id')
            ->join('sales', 'sale_items.sale_id', '=', 'sales.id')
            ->whereBetween('sales.created_at', [
                Carbon::parse($this->startDate)->startOfDay(),
                Carbon::parse($this->endDate)->endOfDay()
            ])
            ->where('sales.status', 'completed')
            ->groupBy(['products.id', 'products.name', 'products.sku', 'products.cost_price'])
            ->orderBy('total_revenue', 'desc')
            ->limit(50)
            ->get()
            ->map(function ($item) {
                $profit = $item->total_revenue - ($item->cost_price * $item->total_quantity);
                $profitMargin = $item->total_revenue > 0 ? ($profit / $item->total_revenue) * 100 : 0;

                return [
                    'name' => $item->name,
                    'sku' => $item->sku,
                    'quantity' => $item->total_quantity,
                    'revenue' => $item->total_revenue,
                    'avg_price' => $item->avg_price,
                    'total_sales' => $item->total_sales,
                    'profit' => $profit,
                    'profit_margin' => $profitMargin,
                ];
            });
    }

    public function title(): string
    {
        return 'Top Products';
    }

    public function headings(): array
    {
        return [
            'Product Name',
            'SKU',
            'Quantity Sold',
            'Total Revenue',
            'Average Price',
            'Sales Count',
            'Total Profit',
            'Profit Margin %'
        ];
    }

    public function styles(Worksheet $sheet)
    {
        return [
            1 => ['font' => ['bold' => true], 'fill' => ['fillType' => Fill::FILL_SOLID, 'color' => ['rgb' => 'E5E7EB']]],
        ];
    }

    public function columnFormats(): array
    {
        return [
            'D' => NumberFormat::FORMAT_CURRENCY_USD,
            'E' => NumberFormat::FORMAT_CURRENCY_USD,
            'G' => NumberFormat::FORMAT_CURRENCY_USD,
            'H' => NumberFormat::FORMAT_PERCENTAGE_00,
        ];
    }
}

class TopCustomersSheet implements FromCollection, WithTitle, WithHeadings, WithStyles, WithColumnFormatting
{
    private $startDate;
    private $endDate;

    public function __construct($startDate, $endDate)
    {
        $this->startDate = $startDate;
        $this->endDate = $endDate;
    }

    public function collection()
    {
        return Sale::query()
            ->select([
                'customers.name',
                'customers.email',
                'customers.phone',
                DB::raw('COUNT(sales.id) as total_orders'),
                DB::raw('SUM(sales.total_amount) as total_spent'),
                DB::raw('AVG(sales.total_amount) as avg_order_value'),
                DB::raw('MAX(sales.created_at) as last_order_date')
            ])
            ->join('customers', 'sales.customer_id', '=', 'customers.id')
            ->whereBetween('sales.created_at', [
                Carbon::parse($this->startDate)->startOfDay(),
                Carbon::parse($this->endDate)->endOfDay()
            ])
            ->where('sales.status', 'completed')
            ->groupBy(['customers.id', 'customers.name', 'customers.email', 'customers.phone'])
            ->orderBy('total_spent', 'desc')
            ->limit(30)
            ->get()
            ->map(function ($customer) {
                return [
                    'name' => $customer->name,
                    'email' => $customer->email,
                    'phone' => $customer->phone,
                    'total_orders' => $customer->total_orders,
                    'total_spent' => $customer->total_spent,
                    'avg_order_value' => $customer->avg_order_value,
                    'last_order_date' => Carbon::parse($customer->last_order_date)->format('M j, Y'),
                ];
            });
    }

    public function title(): string
    {
        return 'Top Customers';
    }

    public function headings(): array
    {
        return [
            'Customer Name',
            'Email',
            'Phone',
            'Total Orders',
            'Total Spent',
            'Average Order Value',
            'Last Order Date'
        ];
    }

    public function styles(Worksheet $sheet)
    {
        return [
            1 => ['font' => ['bold' => true], 'fill' => ['fillType' => Fill::FILL_SOLID, 'color' => ['rgb' => 'E5E7EB']]],
        ];
    }

    public function columnFormats(): array
    {
        return [
            'E' => NumberFormat::FORMAT_CURRENCY_USD,
            'F' => NumberFormat::FORMAT_CURRENCY_USD,
        ];
    }
}

class SalesTrendsSheet implements FromCollection, WithTitle, WithHeadings, WithStyles, WithColumnFormatting
{
    private $startDate;
    private $endDate;

    public function __construct($startDate, $endDate)
    {
        $this->startDate = $startDate;
        $this->endDate = $endDate;
    }

    public function collection()
    {
        return Sale::query()
            ->select([
                DB::raw('DATE(created_at) as date'),
                DB::raw('COUNT(*) as sales_count'),
                DB::raw('SUM(total_amount) as total_amount'),
                DB::raw('AVG(total_amount) as avg_amount')
            ])
            ->whereBetween('created_at', [
                Carbon::parse($this->startDate)->startOfDay(),
                Carbon::parse($this->endDate)->endOfDay()
            ])
            ->where('status', 'completed')
            ->groupBy(DB::raw('DATE(created_at)'))
            ->orderBy('date')
            ->get()
            ->map(function ($trend) {
                return [
                    'date' => Carbon::parse($trend->date)->format('M j, Y'),
                    'sales_count' => $trend->sales_count,
                    'total_amount' => $trend->total_amount,
                    'avg_amount' => $trend->avg_amount,
                ];
            });
    }

    public function title(): string
    {
        return 'Daily Trends';
    }

    public function headings(): array
    {
        return [
            'Date',
            'Sales Count',
            'Total Revenue',
            'Average Sale'
        ];
    }

    public function styles(Worksheet $sheet)
    {
        return [
            1 => ['font' => ['bold' => true], 'fill' => ['fillType' => Fill::FILL_SOLID, 'color' => ['rgb' => 'E5E7EB']]],
        ];
    }

    public function columnFormats(): array
    {
        return [
            'C' => NumberFormat::FORMAT_CURRENCY_USD,
            'D' => NumberFormat::FORMAT_CURRENCY_USD,
        ];
    }
}

class DetailedSalesSheet implements FromCollection, WithTitle, WithHeadings, WithStyles, WithColumnFormatting
{
    private $startDate;
    private $endDate;

    public function __construct($startDate, $endDate)
    {
        $this->startDate = $startDate;
        $this->endDate = $endDate;
    }

    public function collection()
    {
        return Sale::with(['customer', 'user', 'warehouse'])
            ->whereBetween('created_at', [
                Carbon::parse($this->startDate)->startOfDay(),
                Carbon::parse($this->endDate)->endOfDay()
            ])
            ->where('status', 'completed')
            ->orderBy('created_at', 'desc')
            ->get()
            ->map(function ($sale) {
                return [
                    'invoice_number' => $sale->invoice_number,
                    'date' => $sale->created_at->format('M j, Y g:i A'),
                    'customer' => $sale->customer?->name ?? 'Walk-in Customer',
                    'staff' => $sale->user?->name ?? 'Unknown',
                    'warehouse' => $sale->warehouse?->name ?? 'Unknown',
                    'payment_method' => ucfirst(str_replace('_', ' ', $sale->payment_method)),
                    'items_count' => $sale->items->sum('quantity'),
                    'subtotal' => $sale->subtotal,
                    'discount' => $sale->discount_amount,
                    'tax' => $sale->tax_amount,
                    'total' => $sale->total_amount,
                ];
            });
    }

    public function title(): string
    {
        return 'Detailed Sales';
    }

    public function headings(): array
    {
        return [
            'Invoice #',
            'Date & Time',
            'Customer',
            'Staff',
            'Warehouse',
            'Payment Method',
            'Items Count',
            'Subtotal',
            'Discount',
            'Tax',
            'Total'
        ];
    }

    public function styles(Worksheet $sheet)
    {
        return [
            1 => ['font' => ['bold' => true], 'fill' => ['fillType' => Fill::FILL_SOLID, 'color' => ['rgb' => 'E5E7EB']]],
        ];
    }

    public function columnFormats(): array
    {
        return [
            'H' => NumberFormat::FORMAT_CURRENCY_USD,
            'I' => NumberFormat::FORMAT_CURRENCY_USD,
            'J' => NumberFormat::FORMAT_CURRENCY_USD,
            'K' => NumberFormat::FORMAT_CURRENCY_USD,
        ];
    }
}
