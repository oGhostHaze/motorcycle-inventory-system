<?php

namespace App\Exports;

use Maatwebsite\Excel\Concerns\FromCollection;
use Maatwebsite\Excel\Concerns\WithMultipleSheets;
use Maatwebsite\Excel\Concerns\WithTitle;
use Maatwebsite\Excel\Concerns\WithHeadings;
use Maatwebsite\Excel\Concerns\WithStyles;
use Maatwebsite\Excel\Concerns\WithColumnFormatting;
use Maatwebsite\Excel\Concerns\WithMapping;
use Maatwebsite\Excel\Concerns\WithColumnWidths;
use PhpOffice\PhpSpreadsheet\Worksheet\Worksheet;
use PhpOffice\PhpSpreadsheet\Style\NumberFormat;
use PhpOffice\PhpSpreadsheet\Style\Fill;
use PhpOffice\PhpSpreadsheet\Style\Border;
use PhpOffice\PhpSpreadsheet\Style\Alignment;
use Carbon\Carbon;

class InventoryReportsExport implements WithMultipleSheets
{
    private $reportType;
    private $reportData;
    private $summaryData;
    private $filters;

    public function __construct($reportType, $reportData, $summaryData, $filters = [])
    {
        $this->reportType = $reportType;
        $this->reportData = $reportData;
        $this->summaryData = $summaryData;
        $this->filters = $filters;
    }

    public function sheets(): array
    {
        $sheets = [
            new InventorySummarySheet($this->reportType, $this->summaryData, $this->filters),
        ];

        // Add report-specific sheet
        switch ($this->reportType) {
            case 'stock_levels':
                $sheets[] = new StockLevelsSheet($this->reportData);
                break;
            case 'valuation':
                $sheets[] = new ValuationSheet($this->reportData);
                break;
            case 'movement':
                $sheets[] = new MovementSheet($this->reportData);
                break;
            case 'aging':
                $sheets[] = new AgingSheet($this->reportData);
                break;
            case 'abc_analysis':
                $sheets[] = new ABCAnalysisSheet($this->reportData);
                break;
            case 'reorder':
                $sheets[] = new ReorderSheet($this->reportData);
                break;
            case 'turnover':
                $sheets[] = new TurnoverSheet($this->reportData);
                break;
        }

        return $sheets;
    }
}

class InventorySummarySheet implements FromCollection, WithTitle, WithHeadings, WithStyles, WithColumnFormatting, WithColumnWidths
{
    private $reportType;
    private $summaryData;
    private $filters;

    public function __construct($reportType, $summaryData, $filters)
    {
        $this->reportType = $reportType;
        $this->summaryData = $summaryData;
        $this->filters = $filters;
    }

    public function collection()
    {
        $reportTypes = [
            'stock_levels' => 'Stock Levels Report',
            'valuation' => 'Inventory Valuation Report',
            'movement' => 'Stock Movement Report',
            'aging' => 'Inventory Aging Report',
            'abc_analysis' => 'ABC Analysis Report',
            'reorder' => 'Reorder Report',
            'turnover' => 'Inventory Turnover Report',
        ];

        return collect([
            ['Report Type', $reportTypes[$this->reportType] ?? 'Inventory Report'],
            ['Generated On', now()->format('M j, Y g:i A')],
            ['Generated By', auth()->user()->name],
            ['Warehouse Filter', $this->filters['warehouse_name'] ?? 'All Warehouses'],
            ['Category Filter', $this->filters['category_name'] ?? 'All Categories'],
            ['Date Range', ($this->filters['dateFrom'] ?? '') . ' to ' . ($this->filters['dateTo'] ?? '')],
            [''],
            ['SUMMARY METRICS', ''],
            ['Total Products', number_format($this->summaryData['total_products'])],
            ['Total Inventory Value', '₱' . number_format($this->summaryData['total_value'], 2)],
            ['Total Units in Stock', number_format($this->summaryData['total_units'])],
            ['Low Stock Items', number_format($this->summaryData['low_stock_items'])],
            ['Out of Stock Items', number_format($this->summaryData['out_of_stock_items'])],
            ['Average Value per Product', '₱' . number_format($this->summaryData['avg_value_per_product'], 2)],
        ]);
    }

    public function headings(): array
    {
        return ['Metric', 'Value'];
    }

    public function title(): string
    {
        return 'Summary';
    }

    public function styles(Worksheet $sheet)
    {
        return [
            1 => ['font' => ['bold' => true, 'size' => 16]],
            8 => ['font' => ['bold' => true, 'size' => 14]],
            'A:B' => ['alignment' => ['horizontal' => Alignment::HORIZONTAL_LEFT]],
        ];
    }

    public function columnFormats(): array
    {
        return [
            'B' => NumberFormat::FORMAT_TEXT,
        ];
    }

    public function columnWidths(): array
    {
        return [
            'A' => 25,
            'B' => 30,
        ];
    }
}

class StockLevelsSheet implements FromCollection, WithTitle, WithHeadings, WithStyles, WithColumnFormatting, WithMapping, WithColumnWidths
{
    private $reportData;

    public function __construct($reportData)
    {
        $this->reportData = $reportData;
    }

    public function collection()
    {
        // Handle both Collections and Paginators
        if (method_exists($this->reportData, 'items')) {
            return collect($this->reportData->items());
        }
        return collect($this->reportData);
    }

    public function map($row): array
    {
        $status = 'In Stock';
        if ($row->quantity_available <= 0) {
            $status = 'Out of Stock';
        } elseif ($row->min_stock_level && $row->quantity_available <= $row->min_stock_level) {
            $status = 'Low Stock';
        } elseif ($row->max_stock_level && $row->quantity_available > $row->max_stock_level) {
            $status = 'Overstock';
        }

        return [
            $row->product_name,
            $row->sku,
            $row->warehouse->name,
            $row->product->category?->name ?? '',
            $row->quantity_on_hand,
            $row->quantity_available,
            $row->quantity_reserved,
            $row->min_stock_level ?? '',
            $status,
        ];
    }

    public function headings(): array
    {
        return [
            'Product Name',
            'SKU',
            'Warehouse',
            'Category',
            'On Hand',
            'Available',
            'Reserved',
            'Min Level',
            'Status',
        ];
    }

    public function title(): string
    {
        return 'Stock Levels';
    }

    public function styles(Worksheet $sheet)
    {
        return [
            1 => ['font' => ['bold' => true]],
            'A:I' => ['alignment' => ['horizontal' => Alignment::HORIZONTAL_LEFT]],
        ];
    }

    public function columnFormats(): array
    {
        return [
            'E' => NumberFormat::FORMAT_NUMBER,
            'F' => NumberFormat::FORMAT_NUMBER,
            'G' => NumberFormat::FORMAT_NUMBER,
            'H' => NumberFormat::FORMAT_NUMBER,
        ];
    }

    public function columnWidths(): array
    {
        return [
            'A' => 25,
            'B' => 15,
            'C' => 15,
            'D' => 15,
            'E' => 12,
            'F' => 12,
            'G' => 12,
            'H' => 12,
            'I' => 15,
        ];
    }
}

class ValuationSheet implements FromCollection, WithTitle, WithHeadings, WithStyles, WithColumnFormatting, WithMapping, WithColumnWidths
{
    private $reportData;

    public function __construct($reportData)
    {
        $this->reportData = $reportData;
    }

    public function collection()
    {
        // Handle both Collections and Paginators
        if (method_exists($this->reportData, 'items')) {
            return collect($this->reportData->items());
        }
        return collect($this->reportData);
    }

    public function map($row): array
    {
        return [
            $row->product_name,
            $row->sku,
            $row->warehouse->name,
            $row->product->category?->name ?? '',
            $row->quantity_on_hand,
            $row->cost_price,
            $row->cost_value,
            $row->retail_value,
            $row->potential_profit,
        ];
    }

    public function headings(): array
    {
        return [
            'Product Name',
            'SKU',
            'Warehouse',
            'Category',
            'Quantity',
            'Cost Price',
            'Cost Value',
            'Retail Value',
            'Potential Profit',
        ];
    }

    public function title(): string
    {
        return 'Valuation';
    }

    public function styles(Worksheet $sheet)
    {
        return [
            1 => ['font' => ['bold' => true]],
            'A:I' => ['alignment' => ['horizontal' => Alignment::HORIZONTAL_LEFT]],
        ];
    }

    public function columnFormats(): array
    {
        return [
            'E' => NumberFormat::FORMAT_NUMBER,
            'F' => '"₱"#,##0.00',
            'G' => '"₱"#,##0.00',
            'H' => '"₱"#,##0.00',
            'I' => '"₱"#,##0.00',
        ];
    }

    public function columnWidths(): array
    {
        return [
            'A' => 25,
            'B' => 15,
            'C' => 15,
            'D' => 15,
            'E' => 12,
            'F' => 15,
            'G' => 15,
            'H' => 15,
            'I' => 15,
        ];
    }
}

class MovementSheet implements FromCollection, WithTitle, WithHeadings, WithStyles, WithColumnFormatting, WithMapping, WithColumnWidths
{
    private $reportData;

    public function __construct($reportData)
    {
        $this->reportData = $reportData;
    }

    public function collection()
    {
        // Handle both Collections and Paginators
        if (method_exists($this->reportData, 'items')) {
            return collect($this->reportData->items());
        }
        return collect($this->reportData);
    }

    public function map($row): array
    {
        return [
            $row->created_at->format('M j, Y H:i'),
            $row->product->name,
            $row->product->sku,
            $row->warehouse->name,
            ucfirst($row->type),
            $row->quantity_changed,
            ($row->reference_type ?? 'Manual') . ': ' . ($row->reference_id ?? '-'),
            $row->notes ?: '-',
            $row->user->name ?? 'System',
        ];
    }

    public function headings(): array
    {
        return [
            'Date',
            'Product',
            'SKU',
            'Warehouse',
            'Movement Type',
            'Quantity Change',
            'Reference',
            'Notes',
            'User',
        ];
    }

    public function title(): string
    {
        return 'Stock Movement';
    }

    public function styles(Worksheet $sheet)
    {
        return [
            1 => ['font' => ['bold' => true]],
            'A:I' => ['alignment' => ['horizontal' => Alignment::HORIZONTAL_LEFT]],
        ];
    }

    public function columnFormats(): array
    {
        return [
            'F' => NumberFormat::FORMAT_NUMBER,
        ];
    }

    public function columnWidths(): array
    {
        return [
            'A' => 18,
            'B' => 25,
            'C' => 15,
            'D' => 15,
            'E' => 15,
            'F' => 15,
            'G' => 20,
            'H' => 25,
            'I' => 15,
        ];
    }
}

class AgingSheet implements FromCollection, WithTitle, WithHeadings, WithStyles, WithColumnFormatting, WithMapping, WithColumnWidths
{
    private $reportData;

    public function __construct($reportData)
    {
        $this->reportData = $reportData;
    }

    public function collection()
    {
        // Handle both Collections and Paginators
        if (method_exists($this->reportData, 'items')) {
            return collect($this->reportData->items());
        }
        return collect($this->reportData);
    }

    public function map($row): array
    {
        return [
            $row->product_name,
            $row->sku,
            $row->warehouse->name,
            $row->product->category?->name ?? '',
            $row->quantity_on_hand,
            $row->last_received ? Carbon::parse($row->last_received)->format('M j, Y') : 'Never',
            $row->days_since_received ?? 0,
            $row->holding_cost,
        ];
    }

    public function headings(): array
    {
        return [
            'Product Name',
            'SKU',
            'Warehouse',
            'Category',
            'Quantity',
            'Last Received',
            'Days Old',
            'Holding Cost',
        ];
    }

    public function title(): string
    {
        return 'Inventory Aging';
    }

    public function styles(Worksheet $sheet)
    {
        return [
            1 => ['font' => ['bold' => true]],
            'A:H' => ['alignment' => ['horizontal' => Alignment::HORIZONTAL_LEFT]],
        ];
    }

    public function columnFormats(): array
    {
        return [
            'E' => NumberFormat::FORMAT_NUMBER,
            'G' => NumberFormat::FORMAT_NUMBER,
            'H' => '"₱"#,##0.00',
        ];
    }

    public function columnWidths(): array
    {
        return [
            'A' => 25,
            'B' => 15,
            'C' => 15,
            'D' => 15,
            'E' => 12,
            'F' => 15,
            'G' => 12,
            'H' => 15,
        ];
    }
}

class ABCAnalysisSheet implements FromCollection, WithTitle, WithHeadings, WithStyles, WithColumnFormatting, WithMapping, WithColumnWidths
{
    private $reportData;

    public function __construct($reportData)
    {
        $this->reportData = $reportData;
    }

    public function collection()
    {
        // Handle Collections directly since ABC returns a Collection
        return collect($this->reportData);
    }

    public function map($row): array
    {
        return [
            $row->product_name,
            $row->sku,
            $row->total_sales_value,
            $row->total_quantity_sold,
            $row->percentage,
            $row->cumulative_percentage,
            'Category ' . $row->abc_category,
        ];
    }

    public function headings(): array
    {
        return [
            'Product Name',
            'SKU',
            'Sales Value',
            'Qty Sold',
            'Contribution %',
            'Cumulative %',
            'ABC Category',
        ];
    }

    public function title(): string
    {
        return 'ABC Analysis';
    }

    public function styles(Worksheet $sheet)
    {
        return [
            1 => ['font' => ['bold' => true]],
            'A:G' => ['alignment' => ['horizontal' => Alignment::HORIZONTAL_LEFT]],
        ];
    }

    public function columnFormats(): array
    {
        return [
            'C' => '"₱"#,##0.00',
            'D' => NumberFormat::FORMAT_NUMBER,
            'E' => NumberFormat::FORMAT_PERCENTAGE_00,
            'F' => NumberFormat::FORMAT_PERCENTAGE_00,
        ];
    }

    public function columnWidths(): array
    {
        return [
            'A' => 25,
            'B' => 15,
            'C' => 15,
            'D' => 12,
            'E' => 15,
            'F' => 15,
            'G' => 15,
        ];
    }
}

class ReorderSheet implements FromCollection, WithTitle, WithHeadings, WithStyles, WithColumnFormatting, WithMapping, WithColumnWidths
{
    private $reportData;

    public function __construct($reportData)
    {
        $this->reportData = $reportData;
    }

    public function collection()
    {
        // Handle both Collections and Paginators
        if (method_exists($this->reportData, 'items')) {
            return collect($this->reportData->items());
        }
        return collect($this->reportData);
    }

    public function map($row): array
    {
        return [
            $row->product_name,
            $row->sku,
            $row->warehouse->name,
            $row->product->category?->name ?? '',
            $row->quantity_available,
            $row->min_stock_level,
            $row->reorder_quantity,
            $row->reorder_quantity * $row->cost_price,
        ];
    }

    public function headings(): array
    {
        return [
            'Product Name',
            'SKU',
            'Warehouse',
            'Category',
            'Current Stock',
            'Min Level',
            'Suggested Reorder',
            'Cost Estimate',
        ];
    }

    public function title(): string
    {
        return 'Reorder Report';
    }

    public function styles(Worksheet $sheet)
    {
        return [
            1 => ['font' => ['bold' => true]],
            'A:H' => ['alignment' => ['horizontal' => Alignment::HORIZONTAL_LEFT]],
        ];
    }

    public function columnFormats(): array
    {
        return [
            'E' => NumberFormat::FORMAT_NUMBER,
            'F' => NumberFormat::FORMAT_NUMBER,
            'G' => NumberFormat::FORMAT_NUMBER,
            'H' => '"₱"#,##0.00',
        ];
    }

    public function columnWidths(): array
    {
        return [
            'A' => 25,
            'B' => 15,
            'C' => 15,
            'D' => 15,
            'E' => 12,
            'F' => 12,
            'G' => 15,
            'H' => 15,
        ];
    }
}

class TurnoverSheet implements FromCollection, WithTitle, WithHeadings, WithStyles, WithColumnFormatting, WithMapping, WithColumnWidths
{
    private $reportData;

    public function __construct($reportData)
    {
        $this->reportData = $reportData;
    }

    public function collection()
    {
        // Handle Collections directly since Turnover returns a Collection
        return collect($this->reportData);
    }

    public function map($row): array
    {
        return [
            $row->product_name,
            $row->sku,
            $row->category_name ?? '',
            $row->total_sold,
            $row->avg_inventory,
            $row->turnover_ratio,
            $row->days_to_sell,
        ];
    }

    public function headings(): array
    {
        return [
            'Product Name',
            'SKU',
            'Category',
            'Units Sold',
            'Avg Inventory',
            'Turnover Ratio',
            'Days to Sell',
        ];
    }

    public function title(): string
    {
        return 'Inventory Turnover';
    }

    public function styles(Worksheet $sheet)
    {
        return [
            1 => ['font' => ['bold' => true]],
            'A:G' => ['alignment' => ['horizontal' => Alignment::HORIZONTAL_LEFT]],
        ];
    }

    public function columnFormats(): array
    {
        return [
            'D' => NumberFormat::FORMAT_NUMBER,
            'E' => NumberFormat::FORMAT_NUMBER,
            'F' => NumberFormat::FORMAT_NUMBER_00,
            'G' => NumberFormat::FORMAT_NUMBER,
        ];
    }

    public function columnWidths(): array
    {
        return [
            'A' => 25,
            'B' => 15,
            'C' => 15,
            'D' => 12,
            'E' => 15,
            'F' => 15,
            'G' => 15,
        ];
    }
}
