<?php

namespace App\Exports;

use Maatwebsite\Excel\Concerns\FromCollection;
use Maatwebsite\Excel\Concerns\WithMultipleSheets;
use Maatwebsite\Excel\Concerns\WithTitle;
use Maatwebsite\Excel\Concerns\WithHeadings;
use Maatwebsite\Excel\Concerns\WithStyles;
use Maatwebsite\Excel\Concerns\WithColumnFormatting;
use Maatwebsite\Excel\Concerns\WithMapping;
use Maatwebsite\Excel\Concerns\WithColumnWidths;
use PhpOffice\PhpSpreadsheet\Worksheet\Worksheet;
use PhpOffice\PhpSpreadsheet\Style\NumberFormat;
use PhpOffice\PhpSpreadsheet\Style\Fill;
use PhpOffice\PhpSpreadsheet\Style\Border;
use PhpOffice\PhpSpreadsheet\Style\Alignment;
use Carbon\Carbon;

class SalesReportsExport implements WithMultipleSheets
{
    private $reportData;
    private $filters;

    public function __construct($reportData, $filters = [])
    {
        $this->reportData = $reportData;
        $this->filters = $filters;
    }

    public function sheets(): array
    {
        return [
            new SalesReportSummarySheet($this->reportData, $this->filters),
            new TopProductsReportSheet($this->reportData['topProducts'] ?? []),
            new TopCustomersReportSheet($this->reportData['topCustomers'] ?? []),
            new SalesTrendsReportSheet($this->reportData['salesTrends'] ?? []),
            new StaffPerformanceSheet($this->reportData['salesByUser'] ?? []),
            new CategoryPerformanceReportSheet($this->reportData['categoryPerformance'] ?? []),
            new PaymentMethodsReportSheet($this->reportData['paymentMethods'] ?? []),
            new HourlyTrendsReportSheet($this->reportData['hourlyTrends'] ?? []),
        ];
    }
}

class SalesReportSummarySheet implements FromCollection, WithTitle, WithHeadings, WithStyles, WithColumnFormatting, WithColumnWidths
{
    private $reportData;
    private $filters;

    public function __construct($reportData, $filters)
    {
        $this->reportData = $reportData;
        $this->filters = $filters;
    }

    public function collection()
    {
        $salesSummary = $this->reportData['salesSummary'] ?? [];
        $profitSummary = $this->reportData['profitSummary'] ?? [];
        $dailyComparison = $this->reportData['dailyComparison'] ?? [];

        return collect([
            ['Sales Report Summary', ''],
            ['Generated On', now()->format('M j, Y g:i A')],
            ['Generated By', auth()->user()->name],
            ['Report Period', ($this->filters['dateFrom'] ?? '') . ' to ' . ($this->filters['dateTo'] ?? '')],
            ['Warehouse Filter', $this->filters['warehouse_name'] ?? 'All Warehouses'],
            ['Customer Filter', $this->filters['customer_name'] ?? 'All Customers'],
            ['Status Filter', $this->filters['status'] ?: 'All Statuses'],
            ['Payment Method Filter', $this->filters['payment_method'] ?: 'All Methods'],
            [''],
            ['SALES METRICS', ''],
            ['Total Sales Count', number_format($salesSummary['total_sales'] ?? 0)],
            ['Total Revenue', '₱' . number_format($salesSummary['total_revenue'] ?? 0, 2)],
            ['Average Sale Value', '₱' . number_format($salesSummary['average_sale'] ?? 0, 2)],
            ['Total Items Sold', number_format($salesSummary['total_items_sold'] ?? 0)],
            ['Unique Customers', number_format($salesSummary['unique_customers'] ?? 0)],
            [''],
            ['PROFIT METRICS', ''],
            ['Total Profit', '₱' . number_format($profitSummary['total_profit'] ?? 0, 2)],
            ['Profit Margin', number_format($profitSummary['profit_margin'] ?? 0, 2) . '%'],
            ['Total Cost of Goods', '₱' . number_format($profitSummary['total_cost'] ?? 0, 2)],
            ['Average Profit per Sale', '₱' . number_format($profitSummary['average_profit_per_sale'] ?? 0, 2)],
            [''],
            ['PAYMENT BREAKDOWN', ''],
            ['Cash Sales', '₱' . number_format($salesSummary['cash_sales'] ?? 0, 2)],
            ['Card Sales', '₱' . number_format($salesSummary['card_sales'] ?? 0, 2)],
            ['GCash Sales', '₱' . number_format($salesSummary['gcash_sales'] ?? 0, 2)],
            ['Bank Transfer Sales', '₱' . number_format($salesSummary['bank_transfer_sales'] ?? 0, 2)],
            [''],
            ['PERIOD COMPARISON', ''],
            ['Current Revenue', '₱' . number_format($dailyComparison['current_revenue'] ?? 0, 2)],
            ['Previous Revenue', '₱' . number_format($dailyComparison['previous_revenue'] ?? 0, 2)],
            ['Revenue Change', number_format($dailyComparison['revenue_change'] ?? 0, 1) . '%'],
            ['Current Sales Count', number_format($dailyComparison['current_count'] ?? 0)],
            ['Previous Sales Count', number_format($dailyComparison['previous_count'] ?? 0)],
            ['Sales Count Change', number_format($dailyComparison['count_change'] ?? 0, 1) . '%'],
        ]);
    }

    public function headings(): array
    {
        return ['Metric', 'Value'];
    }

    public function title(): string
    {
        return 'Summary';
    }

    public function styles(Worksheet $sheet)
    {
        return [
            1 => ['font' => ['bold' => true, 'size' => 16]],
            10 => ['font' => ['bold' => true, 'size' => 14]],
            17 => ['font' => ['bold' => true, 'size' => 14]],
            23 => ['font' => ['bold' => true, 'size' => 14]],
            29 => ['font' => ['bold' => true, 'size' => 14]],
            'A:B' => ['alignment' => ['horizontal' => Alignment::HORIZONTAL_LEFT]],
        ];
    }

    public function columnFormats(): array
    {
        return [
            'B' => NumberFormat::FORMAT_TEXT,
        ];
    }

    public function columnWidths(): array
    {
        return [
            'A' => 25,
            'B' => 30,
        ];
    }
}

class TopProductsReportSheet implements FromCollection, WithTitle, WithHeadings, WithStyles, WithColumnFormatting, WithMapping, WithColumnWidths
{
    private $topProducts;

    public function __construct($topProducts)
    {
        $this->topProducts = $topProducts;
    }

    public function collection()
    {
        return collect($this->topProducts);
    }

    public function map($product): array
    {
        return [
            $product['name'],
            $product['sku'],
            $product['quantity'],
            $product['revenue'],
            $product['profit'],
            $product['profit_margin'],
            $product['avg_price'],
            $product['total_sales'],
        ];
    }

    public function headings(): array
    {
        return [
            'Product Name',
            'SKU',
            'Quantity Sold',
            'Revenue',
            'Profit',
            'Profit Margin %',
            'Avg Price',
            'Sales Count',
        ];
    }

    public function title(): string
    {
        return 'Top Products';
    }

    public function styles(Worksheet $sheet)
    {
        return [
            1 => ['font' => ['bold' => true]],
            'A:H' => ['alignment' => ['horizontal' => Alignment::HORIZONTAL_LEFT]],
        ];
    }

    public function columnFormats(): array
    {
        return [
            'C' => NumberFormat::FORMAT_NUMBER,
            'D' => '"₱"#,##0.00',
            'E' => '"₱"#,##0.00',
            'F' => NumberFormat::FORMAT_PERCENTAGE_00,
            'G' => '"₱"#,##0.00',
            'H' => NumberFormat::FORMAT_NUMBER,
        ];
    }

    public function columnWidths(): array
    {
        return [
            'A' => 25,
            'B' => 15,
            'C' => 12,
            'D' => 15,
            'E' => 15,
            'F' => 12,
            'G' => 12,
            'H' => 12,
        ];
    }
}

class TopCustomersReportSheet implements FromCollection, WithTitle, WithHeadings, WithStyles, WithColumnFormatting, WithMapping, WithColumnWidths
{
    private $topCustomers;

    public function __construct($topCustomers)
    {
        $this->topCustomers = $topCustomers;
    }

    public function collection()
    {
        return collect($this->topCustomers);
    }

    public function map($customer): array
    {
        return [
            $customer['name'],
            $customer['email'],
            $customer['phone'] ?? '',
            $customer['total_orders'],
            $customer['total_spent'],
            $customer['avg_order_value'],
            Carbon::parse($customer['last_order_date'])->format('M j, Y'),
        ];
    }

    public function headings(): array
    {
        return [
            'Customer Name',
            'Email',
            'Phone',
            'Total Orders',
            'Total Spent',
            'Avg Order Value',
            'Last Order Date',
        ];
    }

    public function title(): string
    {
        return 'Top Customers';
    }

    public function styles(Worksheet $sheet)
    {
        return [
            1 => ['font' => ['bold' => true]],
            'A:G' => ['alignment' => ['horizontal' => Alignment::HORIZONTAL_LEFT]],
        ];
    }

    public function columnFormats(): array
    {
        return [
            'D' => NumberFormat::FORMAT_NUMBER,
            'E' => '"₱"#,##0.00',
            'F' => '"₱"#,##0.00',
        ];
    }

    public function columnWidths(): array
    {
        return [
            'A' => 25,
            'B' => 25,
            'C' => 15,
            'D' => 12,
            'E' => 15,
            'F' => 15,
            'G' => 15,
        ];
    }
}

class SalesTrendsReportSheet implements FromCollection, WithTitle, WithHeadings, WithStyles, WithColumnFormatting, WithMapping, WithColumnWidths
{
    private $salesTrends;

    public function __construct($salesTrends)
    {
        $this->salesTrends = $salesTrends;
    }

    public function collection()
    {
        return collect($this->salesTrends);
    }

    public function map($trend): array
    {
        return [
            isset($trend['date'])
                ? Carbon::parse($trend['date'])->format('M j, Y')
                : Carbon::parse($trend['week_start'])->format('M j') . ' - ' . Carbon::parse($trend['week_end'])->format('M j'),
            $trend['sales_count'],
            $trend['total_amount'],
        ];
    }

    public function headings(): array
    {
        return [
            'Date/Period',
            'Sales Count',
            'Total Revenue',
        ];
    }

    public function title(): string
    {
        return 'Sales Trends';
    }

    public function styles(Worksheet $sheet)
    {
        return [
            1 => ['font' => ['bold' => true]],
            'A:C' => ['alignment' => ['horizontal' => Alignment::HORIZONTAL_LEFT]],
        ];
    }

    public function columnFormats(): array
    {
        return [
            'B' => NumberFormat::FORMAT_NUMBER,
            'C' => '"₱"#,##0.00',
        ];
    }

    public function columnWidths(): array
    {
        return [
            'A' => 20,
            'B' => 15,
            'C' => 18,
        ];
    }
}

class StaffPerformanceSheet implements FromCollection, WithTitle, WithHeadings, WithStyles, WithColumnFormatting, WithMapping, WithColumnWidths
{
    private $salesByUser;

    public function __construct($salesByUser)
    {
        $this->salesByUser = $salesByUser;
    }

    public function collection()
    {
        return collect($this->salesByUser);
    }

    public function map($user): array
    {
        return [
            $user['name'],
            ucfirst(str_replace('_', ' ', $user['role'])),
            $user['total_sales'],
            $user['total_amount'],
            $user['avg_sale_amount'],
        ];
    }

    public function headings(): array
    {
        return [
            'Staff Member',
            'Role',
            'Sales Count',
            'Total Amount',
            'Avg Sale Amount',
        ];
    }

    public function title(): string
    {
        return 'Staff Performance';
    }

    public function styles(Worksheet $sheet)
    {
        return [
            1 => ['font' => ['bold' => true]],
            'A:E' => ['alignment' => ['horizontal' => Alignment::HORIZONTAL_LEFT]],
        ];
    }

    public function columnFormats(): array
    {
        return [
            'C' => NumberFormat::FORMAT_NUMBER,
            'D' => '"₱"#,##0.00',
            'E' => '"₱"#,##0.00',
        ];
    }

    public function columnWidths(): array
    {
        return [
            'A' => 25,
            'B' => 15,
            'C' => 12,
            'D' => 18,
            'E' => 15,
        ];
    }
}

class CategoryPerformanceReportSheet implements FromCollection, WithTitle, WithHeadings, WithStyles, WithColumnFormatting, WithMapping, WithColumnWidths
{
    private $categoryPerformance;

    public function __construct($categoryPerformance)
    {
        $this->categoryPerformance = $categoryPerformance;
    }

    public function collection()
    {
        return collect($this->categoryPerformance);
    }

    public function map($category): array
    {
        return [
            $category['name'],
            $category['total_quantity'],
            $category['total_revenue'],
            $category['total_sales'],
        ];
    }

    public function headings(): array
    {
        return [
            'Category',
            'Items Sold',
            'Revenue',
            'Transactions',
        ];
    }

    public function title(): string
    {
        return 'Category Performance';
    }

    public function styles(Worksheet $sheet)
    {
        return [
            1 => ['font' => ['bold' => true]],
            'A:D' => ['alignment' => ['horizontal' => Alignment::HORIZONTAL_LEFT]],
        ];
    }

    public function columnFormats(): array
    {
        return [
            'B' => NumberFormat::FORMAT_NUMBER,
            'C' => '"₱"#,##0.00',
            'D' => NumberFormat::FORMAT_NUMBER,
        ];
    }

    public function columnWidths(): array
    {
        return [
            'A' => 25,
            'B' => 15,
            'C' => 18,
            'D' => 15,
        ];
    }
}

class PaymentMethodsReportSheet implements FromCollection, WithTitle, WithHeadings, WithStyles, WithColumnFormatting, WithMapping, WithColumnWidths
{
    private $paymentMethods;

    public function __construct($paymentMethods)
    {
        $this->paymentMethods = $paymentMethods;
    }

    public function collection()
    {
        return collect($this->paymentMethods);
    }

    public function map($method): array
    {
        $totalAmount = collect($this->paymentMethods)->sum('total_amount');
        $percentage = $totalAmount > 0 ? ($method['total_amount'] / $totalAmount) * 100 : 0;

        return [
            $method['method'],
            $method['count'],
            $method['total_amount'],
            $method['avg_amount'],
            $percentage,
        ];
    }

    public function headings(): array
    {
        return [
            'Payment Method',
            'Transaction Count',
            'Total Amount',
            'Avg Amount',
            'Percentage %',
        ];
    }

    public function title(): string
    {
        return 'Payment Methods';
    }

    public function styles(Worksheet $sheet)
    {
        return [
            1 => ['font' => ['bold' => true]],
            'A:E' => ['alignment' => ['horizontal' => Alignment::HORIZONTAL_LEFT]],
        ];
    }

    public function columnFormats(): array
    {
        return [
            'B' => NumberFormat::FORMAT_NUMBER,
            'C' => '"₱"#,##0.00',
            'D' => '"₱"#,##0.00',
            'E' => NumberFormat::FORMAT_PERCENTAGE_00,
        ];
    }

    public function columnWidths(): array
    {
        return [
            'A' => 20,
            'B' => 15,
            'C' => 18,
            'D' => 15,
            'E' => 15,
        ];
    }
}

class HourlyTrendsReportSheet implements FromCollection, WithTitle, WithHeadings, WithStyles, WithColumnFormatting, WithMapping, WithColumnWidths
{
    private $hourlyTrends;

    public function __construct($hourlyTrends)
    {
        $this->hourlyTrends = $hourlyTrends;
    }

    public function collection()
    {
        return collect($this->hourlyTrends);
    }

    public function map($trend): array
    {
        return [
            $trend['hour'] . ':00',
            $trend['sales_count'],
            $trend['total_amount'],
        ];
    }

    public function headings(): array
    {
        return [
            'Hour',
            'Sales Count',
            'Total Revenue',
        ];
    }

    public function title(): string
    {
        return 'Hourly Trends';
    }

    public function styles(Worksheet $sheet)
    {
        return [
            1 => ['font' => ['bold' => true]],
            'A:C' => ['alignment' => ['horizontal' => Alignment::HORIZONTAL_LEFT]],
        ];
    }

    public function columnFormats(): array
    {
        return [
            'B' => NumberFormat::FORMAT_NUMBER,
            'C' => '"₱"#,##0.00',
        ];
    }

    public function columnWidths(): array
    {
        return [
            'A' => 15,
            'B' => 15,
            'C' => 18,
        ];
    }
}
