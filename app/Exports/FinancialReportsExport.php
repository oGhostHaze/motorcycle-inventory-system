<?php

namespace App\Exports;

use Maatwebsite\Excel\Concerns\FromCollection;
use Maatwebsite\Excel\Concerns\WithMultipleSheets;
use Maatwebsite\Excel\Concerns\WithTitle;
use Maatwebsite\Excel\Concerns\WithHeadings;
use Maatwebsite\Excel\Concerns\WithStyles;
use Maatwebsite\Excel\Concerns\WithColumnFormatting;
use Maatwebsite\Excel\Concerns\WithMapping;
use Maatwebsite\Excel\Concerns\WithColumnWidths;
use PhpOffice\PhpSpreadsheet\Worksheet\Worksheet;
use PhpOffice\PhpSpreadsheet\Style\NumberFormat;
use PhpOffice\PhpSpreadsheet\Style\Fill;
use PhpOffice\PhpSpreadsheet\Style\Border;
use PhpOffice\PhpSpreadsheet\Style\Alignment;
use Carbon\Carbon;

class FinancialReportsExport implements WithMultipleSheets
{
    private $reportType;
    private $reportData;
    private $summaryData;
    private $comparisonData;
    private $filters;

    public function __construct($reportType, $reportData, $summaryData, $comparisonData, $filters = [])
    {
        $this->reportType = $reportType;
        $this->reportData = $reportData;
        $this->summaryData = $summaryData;
        $this->comparisonData = $comparisonData;
        $this->filters = $filters;
    }

    public function sheets(): array
    {
        $sheets = [
            new FinancialSummarySheet($this->reportType, $this->summaryData, $this->comparisonData, $this->filters),
        ];

        // Add report-specific sheet
        switch ($this->reportType) {
            case 'profit_loss':
                $sheets[] = new ProfitLossSheet($this->reportData);
                break;
            case 'cost_analysis':
                $sheets[] = new CostAnalysisSheet($this->reportData);
                break;
            case 'margin_analysis':
                $sheets[] = new MarginAnalysisSheet($this->reportData);
                break;
            case 'expense_breakdown':
                $sheets[] = new ExpenseBreakdownSheet($this->reportData);
                break;
            case 'cash_flow':
                $sheets[] = new CashFlowSheet($this->reportData);
                break;
            case 'roi_analysis':
                $sheets[] = new ROIAnalysisSheet($this->reportData);
                break;
        }

        return $sheets;
    }
}

class FinancialSummarySheet implements FromCollection, WithTitle, WithHeadings, WithStyles, WithColumnFormatting, WithColumnWidths
{
    private $reportType;
    private $summaryData;
    private $comparisonData;
    private $filters;

    public function __construct($reportType, $summaryData, $comparisonData, $filters)
    {
        $this->reportType = $reportType;
        $this->summaryData = $summaryData;
        $this->comparisonData = $comparisonData;
        $this->filters = $filters;
    }

    public function collection()
    {
        $reportTypes = [
            'profit_loss' => 'Profit & Loss Report',
            'cost_analysis' => 'Cost Analysis Report',
            'margin_analysis' => 'Margin Analysis Report',
            'expense_breakdown' => 'Expense Breakdown Report',
            'cash_flow' => 'Cash Flow Report',
            'roi_analysis' => 'ROI Analysis Report',
        ];

        $data = [
            ['Financial Report Summary', ''],
            ['Report Type', $reportTypes[$this->reportType] ?? 'Financial Report'],
            ['Generated On', now()->format('M j, Y g:i A')],
            ['Generated By', auth()->user()->name],
            ['Report Period', ($this->filters['dateFrom'] ?? '') . ' to ' . ($this->filters['dateTo'] ?? '')],
            ['Warehouse Filter', $this->filters['warehouse_name'] ?? 'All Warehouses'],
            ['Category Filter', $this->filters['category_name'] ?? 'All Categories'],
            [''],
            ['CURRENT PERIOD SUMMARY', ''],
            ['Total Revenue', '₱' . number_format($this->summaryData['total_revenue'], 2)],
            ['Total Expenses', '₱' . number_format($this->summaryData['total_expenses'], 2)],
            ['Net Income', '₱' . number_format($this->summaryData['net_income'], 2)],
            ['Profit Margin', number_format($this->summaryData['profit_margin'], 2) . '%'],
            ['ROI', number_format($this->summaryData['roi'], 2) . '%'],
            ['Total Transactions', number_format($this->summaryData['total_transactions'])],
            ['Average Transaction Value', '₱' . number_format($this->summaryData['avg_transaction_value'], 2)],
            ['Inventory Value', '₱' . number_format($this->summaryData['inventory_value'], 2)],
        ];

        if ($this->comparisonData) {
            $data = array_merge($data, [
                [''],
                ['COMPARISON WITH PREVIOUS PERIOD', ''],
                ['Previous Revenue', '₱' . number_format($this->comparisonData['previous_revenue'], 2)],
                ['Previous Profit', '₱' . number_format($this->comparisonData['previous_profit'], 2)],
                ['Previous Transactions', number_format($this->comparisonData['previous_transactions'])],
                ['Previous Expenses', '₱' . number_format($this->comparisonData['previous_expenses'], 2)],
            ]);
        }

        return collect($data);
    }

    public function headings(): array
    {
        return ['Metric', 'Value'];
    }

    public function title(): string
    {
        return 'Summary';
    }

    public function styles(Worksheet $sheet)
    {
        return [
            1 => ['font' => ['bold' => true, 'size' => 16]],
            9 => ['font' => ['bold' => true, 'size' => 14]],
            19 => ['font' => ['bold' => true, 'size' => 14]],
            'A:B' => ['alignment' => ['horizontal' => Alignment::HORIZONTAL_LEFT]],
        ];
    }

    public function columnFormats(): array
    {
        return [
            'B' => NumberFormat::FORMAT_TEXT,
        ];
    }

    public function columnWidths(): array
    {
        return [
            'A' => 30,
            'B' => 25,
        ];
    }
}

class ProfitLossSheet implements FromCollection, WithTitle, WithHeadings, WithStyles, WithColumnFormatting, WithMapping, WithColumnWidths
{
    private $reportData;

    public function __construct($reportData)
    {
        $this->reportData = $reportData;
    }

    public function collection()
    {
        return collect($this->reportData);
    }

    public function map($row): array
    {
        return [
            Carbon::parse($row->date)->format('M j, Y'),
            $row->revenue,
            $row->cogs,
            $row->gross_profit,
            $row->revenue > 0 ? ($row->gross_profit / $row->revenue) * 100 : 0,
            $row->transactions,
        ];
    }

    public function headings(): array
    {
        return [
            'Date',
            'Revenue',
            'COGS',
            'Gross Profit',
            'Margin %',
            'Transactions',
        ];
    }

    public function title(): string
    {
        return 'Profit & Loss';
    }

    public function styles(Worksheet $sheet)
    {
        return [
            1 => ['font' => ['bold' => true]],
            'A:F' => ['alignment' => ['horizontal' => Alignment::HORIZONTAL_LEFT]],
        ];
    }

    public function columnFormats(): array
    {
        return [
            'B' => '"₱"#,##0.00',
            'C' => '"₱"#,##0.00',
            'D' => '"₱"#,##0.00',
            'E' => NumberFormat::FORMAT_PERCENTAGE_00,
            'F' => NumberFormat::FORMAT_NUMBER,
        ];
    }

    public function columnWidths(): array
    {
        return [
            'A' => 15,
            'B' => 15,
            'C' => 15,
            'D' => 15,
            'E' => 12,
            'F' => 12,
        ];
    }
}

class CostAnalysisSheet implements FromCollection, WithTitle, WithHeadings, WithStyles, WithColumnFormatting, WithMapping, WithColumnWidths
{
    private $reportData;

    public function __construct($reportData)
    {
        $this->reportData = $reportData;
    }

    public function collection()
    {
        return collect($this->reportData);
    }

    public function map($row): array
    {
        return [
            $row->category_name,
            $row->total_quantity,
            $row->total_cost,
            $row->total_revenue,
            $row->total_profit,
            $row->avg_unit_cost,
            $row->avg_selling_price,
        ];
    }

    public function headings(): array
    {
        return [
            'Category',
            'Quantity Sold',
            'Total Cost',
            'Total Revenue',
            'Total Profit',
            'Avg Unit Cost',
            'Avg Selling Price',
        ];
    }

    public function title(): string
    {
        return 'Cost Analysis';
    }

    public function styles(Worksheet $sheet)
    {
        return [
            1 => ['font' => ['bold' => true]],
            'A:G' => ['alignment' => ['horizontal' => Alignment::HORIZONTAL_LEFT]],
        ];
    }

    public function columnFormats(): array
    {
        return [
            'B' => NumberFormat::FORMAT_NUMBER,
            'C' => '"₱"#,##0.00',
            'D' => '"₱"#,##0.00',
            'E' => '"₱"#,##0.00',
            'F' => '"₱"#,##0.00',
            'G' => '"₱"#,##0.00',
        ];
    }

    public function columnWidths(): array
    {
        return [
            'A' => 20,
            'B' => 15,
            'C' => 15,
            'D' => 15,
            'E' => 15,
            'F' => 15,
            'G' => 15,
        ];
    }
}

class MarginAnalysisSheet implements FromCollection, WithTitle, WithHeadings, WithStyles, WithColumnFormatting, WithMapping, WithColumnWidths
{
    private $reportData;

    public function __construct($reportData)
    {
        $this->reportData = $reportData;
    }

    public function collection()
    {
        return collect($this->reportData);
    }

    public function map($row): array
    {
        return [
            $row->product_name,
            $row->sku,
            $row->category_name ?? '',
            $row->total_quantity,
            $row->total_revenue,
            $row->total_profit,
            $row->profit_margin_percentage,
        ];
    }

    public function headings(): array
    {
        return [
            'Product Name',
            'SKU',
            'Category',
            'Qty Sold',
            'Revenue',
            'Profit',
            'Margin %',
        ];
    }

    public function title(): string
    {
        return 'Margin Analysis';
    }

    public function styles(Worksheet $sheet)
    {
        return [
            1 => ['font' => ['bold' => true]],
            'A:G' => ['alignment' => ['horizontal' => Alignment::HORIZONTAL_LEFT]],
        ];
    }

    public function columnFormats(): array
    {
        return [
            'D' => NumberFormat::FORMAT_NUMBER,
            'E' => '"₱"#,##0.00',
            'F' => '"₱"#,##0.00',
            'G' => NumberFormat::FORMAT_PERCENTAGE_00,
        ];
    }

    public function columnWidths(): array
    {
        return [
            'A' => 25,
            'B' => 15,
            'C' => 15,
            'D' => 12,
            'E' => 15,
            'F' => 15,
            'G' => 12,
        ];
    }
}

class ExpenseBreakdownSheet implements FromCollection, WithTitle, WithHeadings, WithStyles, WithColumnFormatting, WithMapping, WithColumnWidths
{
    private $reportData;

    public function __construct($reportData)
    {
        $this->reportData = $reportData;
    }

    public function collection()
    {
        return collect($this->reportData);
    }

    public function map($row): array
    {
        return [
            $row->po_number,
            Carbon::parse($row->order_date)->format('M j, Y'),
            $row->supplier->name ?? '',
            $row->warehouse->name ?? '',
            ucfirst($row->status),
            $row->total_amount,
            $row->actual_expense,
        ];
    }

    public function headings(): array
    {
        return [
            'PO Number',
            'Order Date',
            'Supplier',
            'Warehouse',
            'Status',
            'Total Amount',
            'Actual Expense',
        ];
    }

    public function title(): string
    {
        return 'Expense Breakdown';
    }

    public function styles(Worksheet $sheet)
    {
        return [
            1 => ['font' => ['bold' => true]],
            'A:G' => ['alignment' => ['horizontal' => Alignment::HORIZONTAL_LEFT]],
        ];
    }

    public function columnFormats(): array
    {
        return [
            'F' => '"₱"#,##0.00',
            'G' => '"₱"#,##0.00',
        ];
    }

    public function columnWidths(): array
    {
        return [
            'A' => 15,
            'B' => 12,
            'C' => 20,
            'D' => 15,
            'E' => 12,
            'F' => 15,
            'G' => 15,
        ];
    }
}

class CashFlowSheet implements FromCollection, WithTitle, WithHeadings, WithStyles, WithColumnFormatting, WithMapping, WithColumnWidths
{
    private $reportData;

    public function __construct($reportData)
    {
        $this->reportData = $reportData;
    }

    public function collection()
    {
        return collect($this->reportData);
    }

    public function map($row): array
    {
        return [
            Carbon::parse($row->week_start)->format('M j, Y'),
            $row->cash_in,
            $row->cash_out,
            $row->net_flow,
        ];
    }

    public function headings(): array
    {
        return [
            'Week Starting',
            'Cash In',
            'Cash Out',
            'Net Flow',
        ];
    }

    public function title(): string
    {
        return 'Cash Flow';
    }

    public function styles(Worksheet $sheet)
    {
        return [
            1 => ['font' => ['bold' => true]],
            'A:D' => ['alignment' => ['horizontal' => Alignment::HORIZONTAL_LEFT]],
        ];
    }

    public function columnFormats(): array
    {
        return [
            'B' => '"₱"#,##0.00',
            'C' => '"₱"#,##0.00',
            'D' => '"₱"#,##0.00',
        ];
    }

    public function columnWidths(): array
    {
        return [
            'A' => 15,
            'B' => 15,
            'C' => 15,
            'D' => 15,
        ];
    }
}

class ROIAnalysisSheet implements FromCollection, WithTitle, WithHeadings, WithStyles, WithColumnFormatting, WithMapping, WithColumnWidths
{
    private $reportData;

    public function __construct($reportData)
    {
        $this->reportData = $reportData;
    }

    public function collection()
    {
        return collect($this->reportData);
    }

    public function map($row): array
    {
        return [
            $row->category_name,
            $row->total_investment,
            $row->total_return,
            $row->total_profit,
            $row->roi_percentage,
            $row->transaction_count,
        ];
    }

    public function headings(): array
    {
        return [
            'Category',
            'Investment',
            'Return',
            'Profit',
            'ROI %',
            'Transactions',
        ];
    }

    public function title(): string
    {
        return 'ROI Analysis';
    }

    public function styles(Worksheet $sheet)
    {
        return [
            1 => ['font' => ['bold' => true]],
            'A:F' => ['alignment' => ['horizontal' => Alignment::HORIZONTAL_LEFT]],
        ];
    }

    public function columnFormats(): array
    {
        return [
            'B' => '"₱"#,##0.00',
            'C' => '"₱"#,##0.00',
            'D' => '"₱"#,##0.00',
            'E' => NumberFormat::FORMAT_PERCENTAGE_00,
            'F' => NumberFormat::FORMAT_NUMBER,
        ];
    }

    public function columnWidths(): array
    {
        return [
            'A' => 20,
            'B' => 15,
            'C' => 15,
            'D' => 15,
            'E' => 12,
            'F' => 12,
        ];
    }
}
